{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["counterControl","props","className","onClick","clicked","label","counterOutput","value","Counter","state","counter","counterChangedHandler","action","setState","prevState","this","ctr","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","Component","connect","dispatch","type","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5dd48c72.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\n\nclass Counter extends Component {\n  state = {\n    counter: 0\n  };\n\n  counterChangedHandler = (action, value) => {\n    switch (action) {\n      case \"inc\":\n        this.setState(prevState => {\n          return { counter: prevState.counter + 1 };\n        });\n        break;\n      case \"dec\":\n        this.setState(prevState => {\n          return { counter: prevState.counter - 1 };\n        });\n        break;\n      case \"add\":\n        this.setState(prevState => {\n          return { counter: prevState.counter + value };\n        });\n        break;\n      case \"sub\":\n        this.setState(prevState => {\n          return { counter: prevState.counter - value };\n        });\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <CounterOutput value={this.props.ctr} />\n        <CounterControl\n          label=\"Increment\"\n          clicked={this.props.onIncrementCounter}\n        />\n        <CounterControl\n          label=\"Decrement\"\n          clicked={this.props.onDecrementCounter}\n        />\n        <CounterControl label=\"Add 5\" clicked={this.props.onAddCounter} />\n        <CounterControl\n          label=\"Subtract 5\"\n          clicked={this.props.onSubtractCounter}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ctr: state.counter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter: () => dispatch({ type: \"INCREMENT\" }),\n    onDecrementCounter: () => dispatch({ type: \"DECREMENT\" }),\n    onAddCounter: () => dispatch({ type: \"ADD\" }),\n    onSubtractCounter: () => dispatch({ type: \"SUBTRACT\" })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  counter: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ADD\") {\r\n    return {\r\n      counter: state.counter + 5\r\n    };\r\n  }\r\n\r\n  if (action.type === \"SUBTRACT\") {\r\n    return {\r\n      counter: state.counter - 5\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport reducer from \"./store/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}